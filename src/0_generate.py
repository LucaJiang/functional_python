# generate tablet data, generated by Claude Sonnet 4.5
# Name,Class,Subject,Score
# Alice,A02,Science,90
# Bob,A01,English,78

import pandas as pd
import numpy as np
import os

students = [
    "Alice",
    "Bob",
    "Charlie",
    "David",
    "Eva",
    "Frank",
    "Grace",
    "Hannah",
    "Ian",
    "Jack",
    "Kathy",
    "Leo",
    "Mona",
    "Nina",
    "Oscar",
    "Paul",
    "Quinn",
    "Rachel",
    "Sam",
    "Tina",
    "Uma",
    "Vera",
    "Will",
    "Xander",
    "Yara",
    "Zane",
]
classes = ["A01", "A02", "A03", "B01", "B02"]
subjects = ["Math", "English", "Science", "History", "Art"]
num_records = 1e6
error_proportion = 0.01

# Set save path to data folder in the same directory as this script
num_records = int(num_records)
save_path = os.path.join(
    os.path.dirname(__file__),
    "data",
    f"student_scores_{num_records}.csv",
)

# Set random seed for reproducibility
np.random.seed(42)

# Create empty DataFrame with specified columns
df = pd.DataFrame(columns=["Name", "Class", "Subject", "Score"])

# Generate data - cycle through students sequentially
names = np.array([students[i % len(students)] for i in range(num_records)])
classes_arr = np.random.choice(classes, num_records)
subjects_arr = np.random.choice(subjects, num_records)

# generate scores between 60-100, biased towards higher
scores = np.random.normal(80, 10, num_records)
scores = np.clip(scores, 60, 100)
scores = np.round(scores).astype(int)

df = pd.DataFrame(
    {"Name": names, "Class": classes_arr, "Subject": subjects_arr, "Score": scores}
)

# Introduce missing values - randomly set error_proportion of scores to NaN
num_error = int(len(df) * error_proportion)
if num_error > 0:
    error_indices = np.random.choice(df.index, size=num_error, replace=False)
    df.Score = df.Score.astype(object)  # Ensure Score column can hold strings
    df.loc[error_indices, "Score"] = "SomeError"
    print(f"Set {num_error} scores to 'SomeError' to simulate missing data.")

# Display sample data
print("Sample of generated data:")
print(df.head(5))

# save to CSV
df.to_csv(save_path, index=False)
print(f"Data saved to {save_path}")
